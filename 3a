''' 
INTRO
This is a cartesian plane
  -track x & y coordinate values

SETUP    
First we must layout the numbers in the cartesian plane
  -spiral pattern
  -from 1 up to our puzzle input number
This will give us the cartesian coordinates of our puzzle input number
Then we can procede to the solution below

FIND SOLUTION
To Find The Number of steps back to the center (0,0)
  -count the number of steps to return x coordinate to 0, plus number steps to return y value to 0
    *absolute value of x + absolute value of y = answer
    
ALGORITHM
What is the relation between the spiral pattern and cartesian coordinates?
  -assign cartesian coordinates to each number
  -create mathematical formula
    *only need to run formula once on target number
    *no need to iterate over all numbers leading up to target
'''



targetNum = 277678
currentNum = 1
cycleNum = 1
x = 0
y = 0

print("targetNumber: ",targetNum)    #*** Step Print***

#   assign numbers to spiral cartesian coordinates, up to target number
while currentNum < targetNum:
    for _ in range(cycleNum):
        x += 1
        currentNum += 1
        if currentNum == targetNum: #have we reached targetNum yet?
            #print("currentNum: ", currentNum)           #*** Step Print***
            #print("targetNum: ", targetNum)             #*** Step Print***
            print("steps from targetNum to origin: ",   #*** Step Print***
            abs(x) + abs(y))    #find steps from target number back to origin
            exit 

    for _ in range(cycleNum):
        y += 1
        currentNum += 1
        if currentNum == targetNum:
            #print("currentNum: ", currentNum)           #*** Step Print***
            #print("targetNum: ", targetNum)             #*** Step Print***
            print("steps from targetNum to origin: ",   #*** Step Print***
            abs(x) + abs(y))    #find steps from target number back to origin
            exit 

    cycleNum += 1

    for _ in range(cycleNum):
        x -= 1
        currentNum += 1
        if currentNum == targetNum:
            #print("currentNum: ", currentNum)           #*** Step Print***
            #print("targetNum: ", targetNum)             #*** Step Print***
            print("steps from targetNum to origin: ",   #*** Step Print***
            abs(x) + abs(y))    #find steps from target number back to origin
            exit 

    for _ in range(cycleNum):
        y -= 1
        currentNum += 1
        if currentNum == targetNum:
            #print("currentNum: ", currentNum)           #*** Step Print***
            #print("targetNum: ", targetNum)             #*** Step Print***
            print("steps from targetNum to origin: ",   #*** Step Print***
            abs(x) + abs(y))    #find steps from target number back to origin
            exit 

    cycleNum += 1




targetNum = 277678
currentNum = 1
cycleNum = 1
x = 0
y = 0

print("targetNumber: ",targetNum)    #*** Step Print***

#   assign numbers to spiral cartesian coordinates, up to target number
while currentNum < targetNum:
    for _ in range(cycleNum):
        x += 1
        currentNum += 1
        if currentNum == targetNum: #have we reached targetNum yet?
            #print("currentNum: ", currentNum)           #*** Step Print***
            #print("targetNum: ", targetNum)             #*** Step Print***
            print("steps from targetNum to origin: ",   #*** Step Print***
            abs(x) + abs(y))    #find steps from target number back to origin
            exit 

    for _ in range(cycleNum):
        y += 1
        currentNum += 1
        if currentNum == targetNum:
            #print("currentNum: ", currentNum)           #*** Step Print***
            #print("targetNum: ", targetNum)             #*** Step Print***
            print("steps from targetNum to origin: ",   #*** Step Print***
            abs(x) + abs(y))    #find steps from target number back to origin
            exit 

    cycleNum += 1

    for _ in range(cycleNum):
        x -= 1
        currentNum += 1
        if currentNum == targetNum:
            #print("currentNum: ", currentNum)           #*** Step Print***
            #print("targetNum: ", targetNum)             #*** Step Print***
            print("steps from targetNum to origin: ",   #*** Step Print***
            abs(x) + abs(y))    #find steps from target number back to origin
            exit 

    for _ in range(cycleNum):
        y -= 1
        currentNum += 1
        if currentNum == targetNum:
            #print("currentNum: ", currentNum)           #*** Step Print***
            #print("targetNum: ", targetNum)             #*** Step Print***
            print("steps from targetNum to origin: ",   #*** Step Print***
            abs(x) + abs(y))    #find steps from target number back to origin
            exit 

    cycleNum += 1



